"""Extra command line utilities for nbdev"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/api/02_nbd.ipynb.

# %% auto 0
__all__ = ['nbd_new', 'new_notebook_template', 'zero_pad', 'nbd_add']

# %% ../nbs/api/02_nbd.ipynb 3
from fastcore.all import *
import itertools as it
import os
from ghapi.all import *

import configparser
from pathlib import Path

from .core import *
from .gh import *

import subprocess

import json

from glob import glob
import re

# %% ../nbs/api/02_nbd.ipynb 4
@call_parse
def nbd_new(name:str, description:str, license:str="Apache-2.0", private:bool=False):
    "Create a new nbdev project and setup github repo for it"
    repo, cloned = gh_new_repo_fn(name, description, license, private)
    os.chdir(repo.name)
    subprocess.run(["nbdev_new"])
    subprocess.run(["nbdev_install_hooks"])
    subprocess.run(["nbdev_prepare"])
    subprocess.run(["nbdev_clean"])
    commit_and_push(cloned, "Initial commit")
    setup_pages(repo.name)

# %% ../nbs/api/02_nbd.ipynb 5
def new_notebook_template(name, description):
    template = {
        'cells': [
            {'cell_type': 'markdown', 'metadata': {},
             'source': [
                    f'# {name}\n',
                    '\n',
                    f'> {description}'
                ]},
            {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [],
             'source': [f'#| default_exp {name}']},
            {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [],
             'source': [
                 '#| hide\n',
                 'from nbdev.showdoc import *'
             ]},
            {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [],
             'source': [
                 '#| export\n',
                 'from fastcore.all import *'
             ]},
            {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [],
             'source': [
                 '#| hide\n',
                 'import nbdev; nbdev.nbdev_e'+'xport()' # nbdev_e**ort is a forbidden word
             ]},
      ], 'metadata': { 'kernelspec': { 'display_name': 'python3', 'language': 'python', 'name': 'python3' } }, 'nbformat': 4, 'nbformat_minor': 4
    }
    return template

# %% ../nbs/api/02_nbd.ipynb 9
def zero_pad(num):
    num = str(num)
    return num if len(num) > 1 else f"0{num}"

# %% ../nbs/api/02_nbd.ipynb 11
@call_parse
def nbd_add(name:str, description:str,
            at:Optional[int] = None # If specified, insert new notebook at a specific position
           ):
    "Add new notebook to the project"

    prev_nbs = L(glob("[0-9]*?*.ipynb"))
    prev_ids = prev_nbs.map(lambda x: int(re.match(r'(\d+).*\.ipynb', x).group(1)))
    prev_id = max(prev_ids)

    new_id = prev_id + 1
    new_id = zero_pad(new_id)
    template = get_new_notebook_template(name, description)

    with open(f"{new_id}_{name}.ipynb", 'w') as f:
        json.dump(template, f)
