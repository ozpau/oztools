"""Extra command line utilities for nbdev"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/api/02_nbd.ipynb.

# %% auto 0
__all__ = ['make_things_pretty', 'nbd_new_fn', 'nbd_new', 'new_notebook_template', 'zero_pad', 'nbd_add',
           'get_directories_recursive', 'watch_recursive', 'debounce', 'inotify_debounce', 'nbd_watch_async',
           'nbd_watch']

# %% ../nbs/api/02_nbd.ipynb 3
from pathlib import Path
from fastcore.all import *
import itertools as it
import os, time
from ghapi.all import *

import configparser
from pathlib import Path

from .core import *
from .gh import *

import subprocess

import json
from fastcore.net import HTTP422UnprocessableEntityError

from glob import glob
import re, yaml, shutil
import importlib.resources as res

import asyncio
from asyncinotify import Inotify, Event, Mask
from pathlib import Path
from typing import Generator, AsyncGenerator
from datetime import datetime

# %% ../nbs/api/02_nbd.ipynb 5
def make_things_pretty():
    # Fix not being able to click on "source" link in docs
    with open("./nbs/styles.css", 'a') as f: f.write("\nh3 {\n  width: fit-content;\n}")
    # Add dark theme and make bright theme compatible with in in colorscheme
    theme = {'light': 'united', 'dark': 'superhero'}
    with open("./nbs/_quarto.yml", 'r') as f: data = yaml.safe_load(f)
    data['format']['html']['theme'] = theme
    data['website']['favicon'] = 'favicon.png'
    with open("./nbs/_quarto.yml", 'w') as f: f.write(yaml.dump(data))
    # Copy favicon
    with res.as_file(res.files("oztools")/"data/favicon.png") as f: shutil.copy(f, "./nbs")

# %% ../nbs/api/02_nbd.ipynb 6
def nbd_new_fn(name:str, description:str, license:str="Apache-2.0", private:bool=False):
    "Create a new nbdev project and setup github repo for it"
    gh_repo, local_repo = gh_new_repo_fn(name, description, license, private)
    # this one makes github run CI twice (not nice)
    #setup_pages_branch(local_repo, gh_repo.name)
    os.chdir(gh_repo.name)
    subprocess.run(["nbdev_new"]) # TODO: use .__wrapped__ property to extract original function
    subprocess.run(["nbdev_install_hooks"])
    make_things_pretty()
    subprocess.run(["nbdev_prepare"])
    subprocess.run(["nbdev_clean"])
    # Hopefully using pip + some sleep would be enough for github to be ready
    # to enable pages branch
    commit_and_push(local_repo, "Initial commit")
    subprocess.run(["pip", "install", "-e", ".[dev]"])
    print("Waiting for the github to finish build before enabling pages")
    print("Feel free to start working on the project")
    # TODO: maybe check github api if build is ready
    while True:
        time.sleep(20)
        try:
            setup_pages_branch_location(local_repo, gh_repo.name)
            break
        except HTTP422UnprocessableEntityError:
            pass

# %% ../nbs/api/02_nbd.ipynb 7
@call_parse
def nbd_new(name:str, description:str, license:str="Apache-2.0", private:bool=False):
    "Create a new nbdev project and setup github repo for it"
    nbd_new_fn(name, description, license, private)

# %% ../nbs/api/02_nbd.ipynb 8
def new_notebook_template(name, description):
    template = {
        'cells': [
            {'cell_type': 'markdown', 'metadata': {},
             'source': [
                    f'# {name}\n',
                    '\n',
                    f'> {description}'
                ]},
            {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [],
             'source': [f'#| default_exp {name}']},
            {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [],
             'source': [
                 '#| hide\n',
                 'from nbdev.showdoc import *'
             ]},
            {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [],
             'source': [
                 '#| export\n',
                 'from fastcore.all import *'
             ]},
            {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [],
             'source': [
                 '#| hide\n',
                 'import nbdev; nbdev.nbdev_e'+'xport()' # nbdev_e**ort is a forbidden word
             ]},
      ], 'metadata': { 'kernelspec': { 'display_name': 'python3', 'language': 'python', 'name': 'python3' } }, 'nbformat': 4, 'nbformat_minor': 4
    }
    return template

# %% ../nbs/api/02_nbd.ipynb 12
def zero_pad(num):
    num = str(num)
    return num if len(num) > 1 else f"0{num}"

# %% ../nbs/api/02_nbd.ipynb 14
@call_parse
def nbd_add(name:str, description:str,
            at:Optional[int] = None # If specified, insert new notebook at a specific position
           ):
    "Add new notebook to the project"

    prev_nbs = L(glob("[0-9]*?*.ipynb"))
    prev_ids = prev_nbs.map(lambda x: int(re.match(r'(\d+).*\.ipynb', x).group(1)))
    prev_id = max(prev_ids)

    new_id = prev_id + 1
    new_id = zero_pad(new_id)
    template = new_notebook_template(name, description)

    with open(f"{new_id}_{name}.ipynb", 'w') as f:
        json.dump(template, f)

# %% ../nbs/api/02_nbd.ipynb 17
def get_directories_recursive(path: Path):
    if path.is_dir():
        yield path
        for child in path.iterdir(): yield from get_directories_recursive(child)

# %% ../nbs/api/02_nbd.ipynb 22
async def watch_recursive(path: Path, sync_timeout=None) -> AsyncGenerator[Event, None]:
    mask = Mask.CREATE | Mask.MODIFY
    with Inotify(sync_timeout=sync_timeout) as inotify:
        for directory in get_directories_recursive(path):
            inotify.add_watch(directory, mask)
        async for event in inotify:
            if Mask.CREATE in event.mask and event.path is not None and event.path.is_dir():
                for directory in get_directories_recursive(event.path):
                    #print(f'EVENT: watching {directory}')
                    inotify.add_watch(directory, mask)

            if event.mask & mask:
                yield event

# %% ../nbs/api/02_nbd.ipynb 23
async def debounce(events: AsyncGenerator[Event, None], # event generator
                   debounce_interval = 0.5 # in seconds
                  ) -> AsyncGenerator[Event, None]:
    combined_event = []
    last_event_time = None

    async for event in events:
        current_time = time.time()

        if last_event_time is None or (current_time - last_event_time) <= debounce_interval:
            combined_event.append(event)
        else:
            if combined_event:
                yield combined_event
                combined_event = [event]
        last_event_time = current_time

    print("This will never run for inotify")
    if combined_event:
        yield combined_event

# %% ../nbs/api/02_nbd.ipynb 29
async def inotify_debounce(path, debounce_interval=1):
    print("inotify_debounce")
    combined_event = []
    last_event_time = None

    while True:
        # NOTE: this is not busy waiting because watch_recursive acts as a sleep function
        # This process only wakes up either every debounce interval or when directory events happen
        async for event in watch_recursive(path, debounce_interval):
            print(event)
            current_time = time.time()
    
            if last_event_time is None or (current_time - last_event_time) <= debounce_interval:
                combined_event.append(event)
            else:
                if combined_event:
                    yield combined_event
                    combined_event = [event]
            last_event_time = current_time
    
        print("This will never run for inotify")
        if combined_event:
            yield combined_event

# %% ../nbs/api/02_nbd.ipynb 30
async def nbd_watch_async():
    #async for el in debounce(watch_recursive(Path('nbs')), 1):
    async for el in inotify_debounce(Path('nbs')):
        print(f"[{datetime.now()}] {el[0].path}")
        subprocess.run(["nbdev_export"])

# %% ../nbs/api/02_nbd.ipynb 31
def nbd_watch():
    "Watch `nbs` folder and automatically run `nbdev_export` on file change"
    asyncio.run(nbd_watch_async())
