"""Command line utilities for kaggle competitions"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/api/03_kgl.ipynb.

# %% auto 0
__all__ = ['setup_comp', 'disp_comp', 'get_competitions', 'kgl_list', 'maybe_int', 'get_competition', 'kgl_new']

# %% ../nbs/api/03_kgl.ipynb 3
from fastcore.all import *
from fastkaggle import *
import itertools as it

from .core import *
from .nbd import *

# %% ../nbs/api/03_kgl.ipynb 7
def setup_comp(competition, install=''):
    "Get a path to data for `competition`, downloading it if needed"
    if iskaggle:
        if install:
            os.system(f'pip install -Uqq {install}')
        return Path('../input')/competition
    else:
        path = Path('./data')/competition
        api = import_kaggle()
        if not path.exists():
            import zipfile
            api.competition_download_cli(str(competition), path='./data')
            zipfile.ZipFile(f'./data/{competition}.zip').extractall(path)
        return path

# %% ../nbs/api/03_kgl.ipynb 11
def disp_comp(comp):
    slug = comp.url.split("/")[-1]
    return f"{pad(slug[:40],40)} {comp.title[:40]}"

# %% ../nbs/api/03_kgl.ipynb 14
def get_competitions():
    api = import_kaggle()
    comps = api.competitions_list()
    
    joinedkey = attrkey("userHasEntered")
    comps.sort(key=joinedkey)
    active, entered = (list(y) for x,y in it.groupby(comps, joinedkey))
    return active, entered

# %% ../nbs/api/03_kgl.ipynb 16
@call_parse
def kgl_list():
    "List kaggle competitions"

    active, entered = get_competitions()

    return '\n'.join(("Joined:", *str_enumerate(map(disp_comp, entered), 1),
                      "Active:", *str_enumerate(map(disp_comp, active), 1+len(entered))))

# %% ../nbs/api/03_kgl.ipynb 18
def maybe_int(x: str):
    try:
        return int(x)
    except ValueError:
        return x

# %% ../nbs/api/03_kgl.ipynb 22
def get_competition(n: str):
    active, entered = get_competitions()
    comps = entered + active

    try:
        try: return comps[int(n)-1]
        except ValueError: return L(comps).filter(lambda x: n in x.url.split("/")[-1])[0]
    except IndexError:
        warn("Couldn't find competition")
        return

# %% ../nbs/api/03_kgl.ipynb 23
@call_parse
def kgl_new(n: str, # competition id or name
            save_to: str # project name to use locally and for github
            ):
    "Setup nbdev environment for a kaggle competition"
    comp = get_competition(n)
    if not comp:
        return

    save_to = "kaggle_" + save_to
    
    print(f'Loading competition "{comp.title}" into "{save_to}"')
    nbd_new_fn(save_to, f'Code for [{comp.title}]({comp.url}) Kaggle competition')
